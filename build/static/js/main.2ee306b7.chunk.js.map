{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeHolder","handlerChange","type","placeholder","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filterMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAIaA,EAAO,SAAAC,GAAK,OACrB,sBAA4BC,UAAU,iBAAtC,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,UAHZN,EAAMG,QAAQC,KCAfG,G,MAAW,SAAAP,GAAK,OACrB,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACnB,cAAC,EAAD,CAAMA,QAAWA,WCJxBO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,cAAf,OACrB,uBACIX,UAAY,SACZY,KAAK,SACLC,YAAaH,EAAaI,SAAUH,MCkC7BI,G,wDAnCb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXT,SAAW,GACXU,YAAc,IALL,E,qDASb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,SAAUe,S,oBAG1C,WAAS,IAAD,SAC6BE,KAAKR,MAAhCT,EADF,EACEA,SAAWU,EADb,EACaA,YACbQ,EAAiBlB,EAASmB,QAAO,SAAAxB,GAAO,OAC5CA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWU,YAAc,iBAAiBC,cAAkB,SAAAkB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAcY,EAAEC,OAAOC,WACvG,cAAC,EAAD,CAAUxB,SAAUkB,W,GA1BVO,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2ee306b7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './card.style.css'\r\n\r\nexport const Card = props =>(\r\n    <div key={props.monster.id} className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = props => (\r\n        <div className='card-list'>\r\n            {props.monsters.map(monster => (\r\n                    <Card monster = {monster} />\r\n            ))}\r\n        </div>\r\n);","import ReactFragment from \"react\";\r\n\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeHolder, handlerChange}) =>  (\r\n    <input \r\n        className = \"search\"\r\n        type=\"search\" \r\n        placeholder={placeHolder} onChange={handlerChange}/>\r\n);","import React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters : [],\n      searchField : \"\"\n  }\n}\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  render(){\n    const { monsters , searchField } = this.state;\n    const filterMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeHolder = \"search monster\" handlerChange = { e => this.setState({searchField : e.target.value})}/>\n        <CardList monsters={filterMonsters} />\n      </div>\n    );\n  }\n}\n\n// function App() {\n  \n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}